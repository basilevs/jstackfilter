# JMH version: 1.37
# VM version: JDK 23.0.2, OpenJDK 64-Bit Server VM, 23.0.2+7
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-23.jdk/Contents/Home/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.basilevs.jstackfilter.benchmark.MyBenchmark.parse

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 286.973 ops/s
# Warmup Iteration   2: 292.841 ops/s
# Warmup Iteration   3: 291.861 ops/s
# Warmup Iteration   4: 290.924 ops/s
# Warmup Iteration   5: 288.822 ops/s
Iteration   1: 291.773 ops/s
Iteration   2: 291.183 ops/s
Iteration   3: 291.870 ops/s
Iteration   4: 291.473 ops/s
Iteration   5: 291.589 ops/s

# Run progress: 20.00% complete, ETA 00:06:40
# Fork: 2 of 5
# Warmup Iteration   1: 279.719 ops/s
# Warmup Iteration   2: 286.370 ops/s
# Warmup Iteration   3: 284.973 ops/s
# Warmup Iteration   4: 284.491 ops/s
# Warmup Iteration   5: 284.751 ops/s
Iteration   1: 284.707 ops/s
Iteration   2: 284.392 ops/s
Iteration   3: 284.863 ops/s
Iteration   4: 284.421 ops/s
Iteration   5: 283.497 ops/s

# Run progress: 40.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 283.550 ops/s
# Warmup Iteration   2: 288.384 ops/s
# Warmup Iteration   3: 287.328 ops/s
# Warmup Iteration   4: 286.860 ops/s
# Warmup Iteration   5: 287.171 ops/s
Iteration   1: 287.833 ops/s
Iteration   2: 287.372 ops/s
Iteration   3: 287.732 ops/s
Iteration   4: 287.458 ops/s
Iteration   5: 287.452 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 284.425 ops/s
# Warmup Iteration   2: 289.475 ops/s
# Warmup Iteration   3: 288.248 ops/s
# Warmup Iteration   4: 287.977 ops/s
# Warmup Iteration   5: 288.141 ops/s
Iteration   1: 287.772 ops/s
Iteration   2: 285.996 ops/s
Iteration   3: 287.480 ops/s
Iteration   4: 287.406 ops/s
Iteration   5: 286.985 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 278.909 ops/s
# Warmup Iteration   2: 279.649 ops/s
# Warmup Iteration   3: 282.360 ops/s
# Warmup Iteration   4: 282.286 ops/s
# Warmup Iteration   5: 281.218 ops/s
Iteration   1: 278.164 ops/s
Iteration   2: 278.528 ops/s
Iteration   3: 280.093 ops/s
Iteration   4: 281.297 ops/s
Iteration   5: 278.893 ops/s


Result "org.basilevs.jstackfilter.benchmark.MyBenchmark.parse":
  286.009 ±(99.9%) 3.117 ops/s [Average]
  (min, avg, max) = (278.164, 286.009, 291.870), stdev = 4.162
  CI (99.9%): [282.892, 289.126] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark           Mode  Cnt    Score   Error  Units
MyBenchmark.parse  thrpt   25  286.009 ± 3.117  ops/s
