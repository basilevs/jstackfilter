# JMH version: 1.37
# VM version: JDK 23.0.2, OpenJDK 64-Bit Server VM, 23.0.2+7
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-23.jdk/Contents/Home/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.basilevs.jstackfilter.benchmark.MyBenchmark.parseParallel

# Run progress: 0.00% complete, ETA 00:16:40
# Fork: 1 of 5
# Warmup Iteration   1: 456.409 ops/s
# Warmup Iteration   2: 469.143 ops/s
# Warmup Iteration   3: 468.562 ops/s
# Warmup Iteration   4: 469.338 ops/s
# Warmup Iteration   5: 471.826 ops/s
Iteration   1: 472.916 ops/s
Iteration   2: 473.731 ops/s
Iteration   3: 474.353 ops/s
Iteration   4: 472.285 ops/s
Iteration   5: 472.865 ops/s

# Run progress: 10.00% complete, ETA 00:15:02
# Fork: 2 of 5
# Warmup Iteration   1: 525.561 ops/s
# Warmup Iteration   2: 546.206 ops/s
# Warmup Iteration   3: 547.530 ops/s
# Warmup Iteration   4: 548.158 ops/s
# Warmup Iteration   5: 546.420 ops/s
Iteration   1: 548.830 ops/s
Iteration   2: 546.966 ops/s
Iteration   3: 543.762 ops/s
Iteration   4: 550.755 ops/s
Iteration   5: 550.800 ops/s

# Run progress: 20.00% complete, ETA 00:13:21
# Fork: 3 of 5
# Warmup Iteration   1: 402.248 ops/s
# Warmup Iteration   2: 413.502 ops/s
# Warmup Iteration   3: 415.124 ops/s
# Warmup Iteration   4: 416.192 ops/s
# Warmup Iteration   5: 412.463 ops/s
Iteration   1: 414.705 ops/s
Iteration   2: 415.773 ops/s
Iteration   3: 415.727 ops/s
Iteration   4: 415.790 ops/s
Iteration   5: 415.927 ops/s

# Run progress: 30.00% complete, ETA 00:11:41
# Fork: 4 of 5
# Warmup Iteration   1: 531.529 ops/s
# Warmup Iteration   2: 543.943 ops/s
# Warmup Iteration   3: 545.312 ops/s
# Warmup Iteration   4: 542.237 ops/s
# Warmup Iteration   5: 544.709 ops/s
Iteration   1: 541.621 ops/s
Iteration   2: 542.858 ops/s
Iteration   3: 543.525 ops/s
Iteration   4: 542.810 ops/s
Iteration   5: 544.045 ops/s

# Run progress: 40.00% complete, ETA 00:10:01
# Fork: 5 of 5
# Warmup Iteration   1: 462.864 ops/s
# Warmup Iteration   2: 466.873 ops/s
# Warmup Iteration   3: 469.688 ops/s
# Warmup Iteration   4: 468.775 ops/s
# Warmup Iteration   5: 470.363 ops/s
Iteration   1: 470.517 ops/s
Iteration   2: 469.660 ops/s
Iteration   3: 471.437 ops/s
Iteration   4: 471.300 ops/s
Iteration   5: 471.519 ops/s


Result "org.basilevs.jstackfilter.benchmark.MyBenchmark.parseParallel":
  490.179 ±(99.9%) 38.056 ops/s [Average]
  (min, avg, max) = (414.705, 490.179, 550.800), stdev = 50.804
  CI (99.9%): [452.123, 528.235] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.2, OpenJDK 64-Bit Server VM, 23.0.2+7
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-23.jdk/Contents/Home/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.basilevs.jstackfilter.benchmark.MyBenchmark.serialParse

# Run progress: 50.00% complete, ETA 00:08:21
# Fork: 1 of 5
# Warmup Iteration   1: 285.126 ops/s
# Warmup Iteration   2: 289.081 ops/s
# Warmup Iteration   3: 289.126 ops/s
# Warmup Iteration   4: 289.852 ops/s
# Warmup Iteration   5: 289.681 ops/s
Iteration   1: 289.387 ops/s
Iteration   2: 289.202 ops/s
Iteration   3: 289.026 ops/s
Iteration   4: 288.649 ops/s
Iteration   5: 289.207 ops/s

# Run progress: 60.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 284.391 ops/s
# Warmup Iteration   2: 290.624 ops/s
# Warmup Iteration   3: 290.343 ops/s
# Warmup Iteration   4: 290.878 ops/s
# Warmup Iteration   5: 290.396 ops/s
Iteration   1: 290.432 ops/s
Iteration   2: 290.049 ops/s
Iteration   3: 289.454 ops/s
Iteration   4: 288.087 ops/s
Iteration   5: 286.748 ops/s

# Run progress: 70.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 282.955 ops/s
# Warmup Iteration   2: 287.860 ops/s
# Warmup Iteration   3: 287.318 ops/s
# Warmup Iteration   4: 288.765 ops/s
# Warmup Iteration   5: 289.148 ops/s
Iteration   1: 288.286 ops/s
Iteration   2: 289.060 ops/s
Iteration   3: 287.679 ops/s
Iteration   4: 286.331 ops/s
Iteration   5: 285.828 ops/s

# Run progress: 80.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 318.150 ops/s
# Warmup Iteration   2: 323.107 ops/s
# Warmup Iteration   3: 328.499 ops/s
# Warmup Iteration   4: 326.872 ops/s
# Warmup Iteration   5: 327.953 ops/s
Iteration   1: 329.034 ops/s
Iteration   2: 327.402 ops/s
Iteration   3: 327.828 ops/s
Iteration   4: 329.072 ops/s
Iteration   5: 325.197 ops/s

# Run progress: 90.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 320.281 ops/s
# Warmup Iteration   2: 328.032 ops/s
# Warmup Iteration   3: 325.572 ops/s
# Warmup Iteration   4: 322.885 ops/s
# Warmup Iteration   5: 324.012 ops/s
Iteration   1: 328.435 ops/s
Iteration   2: 328.733 ops/s
Iteration   3: 328.605 ops/s
Iteration   4: 328.413 ops/s
Iteration   5: 329.119 ops/s


Result "org.basilevs.jstackfilter.benchmark.MyBenchmark.serialParse":
  304.370 ±(99.9%) 14.895 ops/s [Average]
  (min, avg, max) = (285.828, 304.370, 329.119), stdev = 19.884
  CI (99.9%): [289.476, 319.265] (assumes normal distribution)


# Run complete. Total time: 00:16:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                   Mode  Cnt    Score    Error  Units
MyBenchmark.parseParallel  thrpt   25  490.179 ± 38.056  ops/s
MyBenchmark.serialParse    thrpt   25  304.370 ± 14.895  ops/s
