# JMH version: 1.37
# VM version: JDK 23.0.2, OpenJDK 64-Bit Server VM, 23.0.2+7
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-23.jdk/Contents/Home/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.basilevs.jstackfilter.benchmark.MyBenchmark.parse

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 316.079 ops/s
# Warmup Iteration   2: 326.193 ops/s
# Warmup Iteration   3: 324.050 ops/s
# Warmup Iteration   4: 324.822 ops/s
# Warmup Iteration   5: 325.395 ops/s
Iteration   1: 322.807 ops/s
Iteration   2: 324.976 ops/s
Iteration   3: 326.876 ops/s
Iteration   4: 324.079 ops/s
Iteration   5: 325.905 ops/s

# Run progress: 20.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 278.845 ops/s
# Warmup Iteration   2: 284.469 ops/s
# Warmup Iteration   3: 285.374 ops/s
# Warmup Iteration   4: 282.366 ops/s
# Warmup Iteration   5: 285.300 ops/s
Iteration   1: 284.159 ops/s
Iteration   2: 284.298 ops/s
Iteration   3: 285.167 ops/s
Iteration   4: 285.226 ops/s
Iteration   5: 284.366 ops/s

# Run progress: 40.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 282.908 ops/s
# Warmup Iteration   2: 288.082 ops/s
# Warmup Iteration   3: 287.544 ops/s
# Warmup Iteration   4: 288.514 ops/s
# Warmup Iteration   5: 287.548 ops/s
Iteration   1: 287.177 ops/s
Iteration   2: 287.242 ops/s
Iteration   3: 287.743 ops/s
Iteration   4: 287.669 ops/s
Iteration   5: 287.091 ops/s

# Run progress: 60.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 284.761 ops/s
# Warmup Iteration   2: 290.938 ops/s
# Warmup Iteration   3: 290.042 ops/s
# Warmup Iteration   4: 290.854 ops/s
# Warmup Iteration   5: 289.440 ops/s
Iteration   1: 287.288 ops/s
Iteration   2: 288.649 ops/s
Iteration   3: 289.178 ops/s
Iteration   4: 290.253 ops/s
Iteration   5: 289.518 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 277.098 ops/s
# Warmup Iteration   2: 283.875 ops/s
# Warmup Iteration   3: 283.353 ops/s
# Warmup Iteration   4: 283.358 ops/s
# Warmup Iteration   5: 283.514 ops/s
Iteration   1: 282.525 ops/s
Iteration   2: 282.151 ops/s
Iteration   3: 280.226 ops/s
Iteration   4: 280.297 ops/s
Iteration   5: 282.880 ops/s


Result "org.basilevs.jstackfilter.benchmark.MyBenchmark.parse":
  293.510 ±(99.9%) 12.184 ops/s [Average]
  (min, avg, max) = (280.226, 293.510, 326.876), stdev = 16.265
  CI (99.9%): [281.326, 305.693] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark           Mode  Cnt    Score    Error  Units
MyBenchmark.parse  thrpt   25  293.510 ± 12.184  ops/s
