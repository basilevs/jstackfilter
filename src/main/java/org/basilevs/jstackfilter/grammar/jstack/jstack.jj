options
{
  STATIC = false;
  CHOICE_AMBIGUITY_CHECK = 10;
}

PARSER_BEGIN(JstackParser)
package org.basilevs.jstackfilter.grammar.jstack;
import org.basilevs.jstackfilter.Frame;
import org.basilevs.jstackfilter.JavaThread;
import java.util.ArrayList;
import java.util.Collection;

@SuppressWarnings( { "unused", "serial" })
public final class JstackParser
{
  public static void main(String [] args) throws ParseException, TokenMgrError
  {
    JstackParser parser = new JstackParser(System.in);
    parser.jstackDump();
  }
}

PARSER_END(JstackParser)

TOKEN :
{
  < QUOTE : "\"" (~[ "\"" ])* "\"" >
}

TOKEN :
{
  < WORD :
    [ "A"-"Z", "a"-"z", "0"-"9", "-", "+" ]
    (
      "_"
    | [ "A"-"Z", "a"-"z", "0"-"9", "-", "+" ]
    )* >
}

TOKEN :
{
  < EOL :
    "\n"
  | "\r"
  | "\r\n" >
}

TOKEN :
{
  < FRAMEINDENT :
    "        "
  | "\t" >
}

TOKEN :
{
  < SPACE :
    " "
  | "  "
  | "   "
  | "," >
}

private void jstackHeader() :
{
}
{
  < TIME : [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] "-" [ "0"-"9" ] [ "0"-"9" ] "-" [ "0"-"9" ] [ "0"-"9" ] " " [ "0"-"9" ] [ "0"-"9" ] ":" [ "0"-"9" ] [ "0"-"9" ] ":" [ "0"-"9" ] [ "0"-"9" ] > < EOL > 
  "Full thread dump " line() ":" < EOL > 
  < EOL > 
  "Threads class SMR info:" < EOL > 
  "_java_thread_list=" < WORD > ", length=" < WORD > ", elements={" < EOL >
  (
    line() < EOL >
  )*
  "}" < EOL >
}

private void parenses() :
{
  StringBuilder image = new StringBuilder();
  Token t;
}
{
  "("
  (
    t = < SPACE >
  | t = < WORD >
    {
      image.append(t.image);
    }
  )*
  ")"
}

private String line() :
{
  StringBuilder image = new StringBuilder();
  Token t;
}
{
  (
    LOOKAHEAD(2)
    t = "("
    {
      image.append(t.image);
    }
  | 
    t = ")"
    {
      image.append(t.image);
    }
  | 
    t = "["
    {
      image.append(t.image);
    }
  | 
    t = "]"
    {
      image.append(t.image);
    }
  | 
    t = "."
    {
      image.append(t.image);
    }
  | 
    t = "$"
    {
      image.append(t.image);
    }
  | 
    t = "<"
    {
      image.append(t.image);
    }
  | 
    t = ">"
    {
      image.append(t.image);
    }
  | 
    t = < WORD >
    {
      image.append(t.image);
    }
  | 
    t = < SPACE >
    {
      image.append(t.image);
    }
  )*
  {
    return image.toString();
  }
}

private String method() :
{
  StringBuilder image = new StringBuilder();
  Token t;
}
{
  (
    LOOKAHEAD(2)
    (
      t = < WORD >
      {
        image.append(t.image);
      }
    | 
      "."
      {
        image.append(".");
      }
    | 
      "$"
      {
        image.append("$");
      }
    | 
      "/"
      {
        image.append("/");
      }
    |
      "<"
       t = < WORD >
      ">" 
      {
        image.append("<" + t.image + ">");
      }
    )
  )+
  {
    return image.toString();
  }
}

//at java.lang.Object.wait(java.base@17/Native Method)
private Frame frame() :
{
  StringBuilder image = new StringBuilder();
  String method;
  Token t;
}
{
  "at " 
  method = method() 
  "("
  (
    "java.base@"
    (
    "."
    | < WORD >
    )+
    "/"
  )?
  (
    t = "Native Method"
    {
      image.append(t.image);
    }
  | 
    t = "Unknown Source"
    {
      image.append(t.image);
    }
  |
        LOOKAHEAD(2)
    (
        t = < WORD >
        {
          image.append(t.image);
        }
      | 
        "."
        {
          image.append(".");
        }
      
    )+
    ":" 
    t = < WORD >
    {
      image.append(":").append(t.image);
    }
  )
  ")"
  {
    return new Frame(method, image.toString());
  }
}

void monitor() :
{
  String line = "";
}
{
  "- " line()
}

void keyValue() :
{
}
{
  < WORD > "="
  (
    < WORD >
  | "."
  )+
}

//"VM Thread" os_prio=2 cpu=203.12ms elapsed=98699.54s tid=0x000002c22c0b2de0 nid=0x2c90 runnable
void nativeThread() :
{
}
{
  < QUOTE >
  (
    LOOKAHEAD(2)
    < SPACE >
    (
      LOOKAHEAD(2)
      keyValue()
    | 
      < WORD >
    )
  )+
  < SPACE >
}

//"Worker-136" #2027 prio=5 os_prio=0 cpu=0.00ms elapsed=86.18s tid=0x000002c23074b590 nid=0x5884 in Object.wait()  [0x000000d6fb8fe000]
//   java.lang.Thread.State: TIMED_WAITING (on object monitor)
//	at java.lang.Object.wait(java.base@17/Native Method)
//	- waiting on <no object reference available>
//	at org.eclipse.core.internal.jobs.WorkerPool.sleep(WorkerPool.java:200)
//	- locked <0x0000000083286520> (a org.eclipse.core.internal.jobs.WorkerPool)
//	at org.eclipse.core.internal.jobs.WorkerPool.startJob(WorkerPool.java:242)
//	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:58)
JavaThread javaThread() :
{
  ArrayList < Frame > frames = new ArrayList < Frame > ();
  Frame f;
  Token t;
  String name;
  String state;
}
{
  t = < QUOTE >
  {
    int length = t.image.length();
    name = t.image.substring(1, length - 1);	
  }
  < SPACE > "#"
    < WORD >
  (
    LOOKAHEAD(2)
    < SPACE >
    (
      LOOKAHEAD(2)
      keyValue()
    | 
      LOOKAHEAD(2)
      < WORD >
    | LOOKAHEAD(2)
      "in Object.wait()"
    )
  )+
  < SPACE > 
  "[" < WORD > "]" 
  (< EOL >)? 
  < SPACE > "java.lang.Thread.State: " t = < WORD >
  {
    state = t.image;
  }
  (
    < SPACE > "("
    {
      state += " (";
    }
    (
      t = < WORD >
      {
        state += t.image;
      }
    | t = < SPACE >
      {
        state += t.image;
      }
    )*
    ")"
    {
      state += ")";
    }
  )?
  < EOL >
  (
    < SPACE >
    (      "No compile task" < EOL >
    |

    //   Compiling: 37714 % !   4       org.eclipse.jdt.internal.core.builder.NameEnvironment::computeClasspathLocations @ 698 (2340 bytes)    //   Compiling: 18676 %     4       sun.security.util.AbstractAlgorithmConstraints::checkAlgorithm @ 93 (138 bytes)
    "Compiling: " < WORD > ( (< SPACE > | "%" | "!" | < WORD > ) ) * method() "::" < WORD > <SPACE > ("@" <SPACE > < WORD > <SPACE >)? "(" < WORD > " bytes" ")" < EOL >
    ) 
  | 
    (
      < FRAMEINDENT >
      (
        monitor()
      | 
        f = frame()
        {
          frames.add(f);
        }
      )
      < EOL >
    )*
  )
  {
    return new JavaThread(name, state, frames);
  }
}

Collection < JavaThread > threads() :
{
  ArrayList < JavaThread > javaThreads = new ArrayList < JavaThread > ();
  JavaThread thread;
}
{
  (
    (
      LOOKAHEAD(3)
      thread = javaThread()
      {
        javaThreads.add(thread);
      }
    | nativeThread()
    )
    < EOL >
  )*
  {
    return javaThreads;
  }
}

Collection < JavaThread > jstackDump() :
{
  Collection < JavaThread > javaThreads;
}
{
  jstackHeader() 
  < EOL > 
  javaThreads = threads()
  {
    return javaThreads;
  }
}
